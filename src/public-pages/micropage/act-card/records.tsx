import React from "react";import Nerv from 'nervjs'import Taro, {getCurrentInstance} from '@tarojs/taro'import {Image, Input, Text, View} from '@tarojs/components'import ApiRequest, {getTabBarList, computedTabMenu} from '@/service'import log from "@/utils/log"import cacheManager from "@/service/cacheManager";import WXSDK from "@/service/WXSDK";import {AppUrls} from "@/config/pathConfig";import {Barcode, QRCode} from 'taro-code'import IconFont from '@/components/iconfont';import {    Blank, NoData,} from '@/config/comptsConfig'import {HEADER_DEFAULT_ICON} from "@/utils/image";import {getDateStr, parseParams} from "@/utils";import eventBus from "@/utils/eventBus";export default class Index extends React.Component<any> {    [x: string]: any    public state: any = {        t: new Date(),        list: []    }    // 生命周期钩子    async componentDidMount() {        const curInstance = getCurrentInstance();        const curentParams = curInstance.router?.params;        const {iactivityId} = curentParams || {};        const cstId = cacheManager.getCustomerUserInfo()?.cstId;        const list = await ApiRequest.luckyList({postParams: {cstId, activityId: iactivityId}});        this.setState({list})        eventBus.$on("onShow", async () => {            const list = await ApiRequest.luckyList({postParams: {cstId, activityId: iactivityId}});            this.setState({list})        });    }    goSubmit(item) {        const postParams = {            ...item,            refPageName: this.props.pageInfo.pageTitle,            productNum: 1,        }        const templateId = (cacheManager.getPcenterInfo())?.templateId || 1;        if (templateId == 2) {            WXSDK.link(this.props.confirmOrder?.linkValue, postParams).then(r => r);            return;        }        WXSDK.linkNavigateTo(AppUrls.orderSubmit + "?" + parseParams(postParams))    }    render() {        const {t, list} = this.state;        return (            <View className="full-width r-px-32">                {                    list?.length > 0 ? list.map(v => {                        return <View className="bg-white r-pa-24 r-mt-24 row items-center">                            <View className="flex-2">                                <View                                    className="text-title font-size-30 text-bold">{v.awardName}</View>                                {                                    v.givenTime && <View                                        className="font-size-24 text-subTitle"> {getDateStr(v.givenTime, 1)}</View>                                }                            </View>                            <View className="flex-1 flex justify-end items-center font-size-28">                                {                                    v.status == 0 ? <View                                            className="bg-submit text-black border-radius-10 r-px-20 r-py-4 text-bold font-size-28"                                            onClick={this.goSubmit.bind(this, v)}>去领取</View> :                                        (                                            v.awardType == 3 ? <View                                                    className="bg-white border  text-grey3 border-radius-10 r-px-20 r-py-4 text-bold font-size-28">已领取</View> :                                                <View                                                    className="bg-grey text-white border-radius-10 r-px-20 r-py-4 text-bold font-size-28">已发放</View>                                        )                                }                            </View>                        </View>                    }) : <NoData text={'暂无中奖记录'}/>                }                <Blank height={48}/>            </View>        )    }}